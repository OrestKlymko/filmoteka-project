{"mappings":"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","sources":["src/index.js","src/js/get-movie-by-name.js","src/js/get-movie-details.js","src/js/get-popular-movies.js","node_modules/@swc/helpers/lib/_define_property.js","<<jsx-config-pragma.js>>","src/js/popular-movies-page-rendering.js","src/js/make-markup-card.js","src/js/genres-array.js"],"sourcesContent":["import './js/movie_modal';\nimport './js/get-movie-by-id.js';\nimport './js/get-movie-by-name.js'\nimport './js/get-movie-details.js'\nimport './js/get-popular-movies.js'\nimport './js/local-storage.js'\n// import './js/pagination.js'\n// import './js/spinner.js'\nimport './js/popular-movies-page-rendering.js'\nimport './js/make-markup-card.js'\nimport './js/get-trailer.js'\nimport './js/show-trailer.js'\nimport \"./js/team\" \n\n","const BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '?api_key=f7d7a9b2e374f67b5381a74b61fb7dc2';\n\nexport default async function fetchMoviesByName(movieName) {\n  try {\n    const response = await fetch(\n      `${BASE_URL}/search/movie${API_KEY}&query=${movieName}&language=en-US`\n    );\n    const data = await response.json();\n    if (data.results.length === 0) {\n      throw new Error(`No movies found with name \"${movieName}\"`);\n    }\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n}\n","import fetchMoviesByName from \"./get-movie-by-name.js\";\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '?api_key=f7d7a9b2e374f67b5381a74b61fb7dc2';\n\n\nexport default async function getMovieDetails(movieName) {\n  try {\n    const response = await fetchMoviesByName(movieName);\n    const movieId = response.results[0].id;\n    const movieDetailsResponse = await fetch(`${BASE_URL}/movie/${movieId}${API_KEY}&language=en-US`);\n    if (!movieDetailsResponse.ok) {\n      throw new Error(`Failed to fetch movie details for \"${movieName}\"`);\n    }\n    return await movieDetailsResponse.json();\n  } catch (error) {\n    console.log(error);\n  }\n}\n","export class getPopularMovies {\n  BASE_URL = 'https://api.themoviedb.org/3';\n  API_KEY = '?api_key=f7d7a9b2e374f67b5381a74b61fb7dc2';\n  page = 1;\n\n  async fetchPopularMovies() {\n    try {\n      const response = await fetch(\n        `${this.BASE_URL}/movie/popular${this.API_KEY}&page=${this.page}&language=en-US`\n      );\n      return await response.json();\n\n    } catch (error) {\n\n      throw new Error(error.message);\n    }\n  }\n  incrementPage() {\n    this.page += 1;\n  }\n  resetPage() {\n    this.page = 1;\n  }\n}","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _defineProperty;\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\n",null,"import createMarkUp from './make-markup-card'\nimport {getPopularMovies} from './get-popular-movies'\n\nconst movieWrapperEl = document.getElementById('uk') \n\nconst getPopularMoviesIns = new getPopularMovies()\n\n\n// movieWrapperEl.innerHTML = ''\n\nconst popularMoviesPageRendering = async() => {\n    try {\n        const { results } = await getPopularMoviesIns.fetchPopularMovies()\n\n        createMarkUp(results)\n\n    } catch (err) {\n        console.log(err)\n    }\n}\n\npopularMoviesPageRendering()","import fetchMoviesByName from './get-movie-by-name'\nimport Notiflix from 'notiflix';\nimport { genres } from './genres-array'\n\nconst searchMoviesFormEl = document.querySelector('#search-form')\nconst movieWrapperEl = document.querySelector('.js-movies-wrapper') \nconst searchInputEl = document.querySelector('search__form');\n\nconst handleSearchMoviesForm = async event => {\n    event.preventDefault()\n\n    movieWrapperEl.innerHTML = '';\n\n    const movieName = event.currentTarget.searchQuery.value.trim();\n    if (movieName === '') {\n    return;\n    }\n\n    try {\n        const {results} = await fetchMoviesByName(movieName)\n\n        createMarkUp(results)\n\n        if (!results.length) {\n            console.log('Movies not found!');\n            Notiflix.Notify.failure('Search result not successful. Enter the correct movie name.'\n            );\n      return;\n        }\n    } catch (err) {\n        console.log(err)\n    }\n\n}\n\nexport default function createMarkUp(results) {\n    const markUp = results.map(\n        (movie) => {\n            const date = new Date(`${movie.release_date}`);\n            const year = date.getFullYear()\n\n            const genresArray = movie.genre_ids.map((id) => { \n                const genre = genres.find(genre => genre.id === id)\n\n                  return genre ? genre.name : '';  \n            })\n            // console.log(genresArray)\nlet genresNames = ''\n            if (genresArray.length > 2 ) {\n                genresNames = arrayLengthCheck(genresArray).join(', ') + \", other\"\n            } else {\n                genresNames = genresArray.join(', ')\n            }\n\n        return `<div class=\"thumb\">\n    <ul class=\"carditem\" data-id='${movie.id}'>\n        <li class=\"cardimg-wrap\">\n            <img src=\"https://image.tmdb.org/t/p/w500/${movie.poster_path}\" alt=\"poster of the movie ${movie.original_title}\"\n                class=\"cardimg\"\n            />\n        </li>\n        <li class=\"cardtext-wrap\">\n            <h2 class=\"cardname\">${movie.original_title}</h2>\n            <div class=\"cardinfo\">\n                <p class=\"cardgenres\">${genresNames}</span></p>\n                <p class=\"cardyear\">${year}</p>\n            </div>\n        </li>\n    </ul>\n</div>\n`\n   })\n        .join('');\n\n    movieWrapperEl.insertAdjacentHTML('beforeend', markUp);\n\n    return markUp\n}\n\nexport function arrayLengthCheck(array) {\n    return array.slice(0,2) \n    };\n\nsearchMoviesFormEl.addEventListener('submit', handleSearchMoviesForm)\n","export const genres = [\n{id: 28, name: 'Action'},\n{id: 12, name: 'Adventure'},\n{id: 16, name: 'Animation'},\n{id: 35, name: 'Comedy'},\n{id: 80, name: 'Crime'},\n{id: 99, name: 'Documentary'},\n{id: 10751, name: 'Family'},\n{id: 14, name: 'Fantasy'},\n{id: 36, name: 'History'},\n{id: 27, name: 'Horror'},\n{id: 10402, name: 'Music'},\n{id: 9648, name: 'Mystery'},\n{id: 10749, name: 'Romance'},\n{id: 878, name: 'Science Fiction'},\n{id: 10770, name: 'TV Movie'},\n{id: 53, name: 'Thriller'},\n{id: 10752, name: 'War'},\n    { id: 37, name: 'Western' },\n    { id: 18, name: 'Drama' }\n]"],"names":["parcelRequire","$bpxeT","$59788c57f54f9132$var$BASE_URL","$59788c57f54f9132$var$API_KEY","movieName","$59788c57f54f9132$var$_fetchMoviesByName","apply","this","arguments","$parcel$interopDefault","$2TvXO","mark","_callee","response","data","fetch","concat","_ctx","sent","json","results","length","Error","console","log","t0","Object","defineProperty","$cec85eba0a352189$exports","value","default","obj","key","enumerable","configurable","writable","$63a565770f159dd3$export$76bd8a7b840a3729","getPopularMovies","_this","BASE_URL","API_KEY","page","message","$c7083d395436c80d$export$be3a0ca764f9df2b","id","name","$3cf536f6c9c41578$var$searchMoviesFormEl","document","querySelector","$3cf536f6c9c41578$var$movieWrapperEl","$3cf536f6c9c41578$var$handleSearchMoviesForm","event","preventDefault","innerHTML","currentTarget","searchQuery","trim","$59788c57f54f9132$export$2e2bcd8739ae039","$3cf536f6c9c41578$export$2e2bcd8739ae039","$6JpON","Notify","failure","markUp","map","movie","array","year","Date","release_date","getFullYear","genresArray","genre_ids","genre1","find","genre","genresNames","slice","join","poster_path","original_title","insertAdjacentHTML","addEventListener","getElementById","$01a0648b06194bb7$var$getPopularMoviesIns","$01a0648b06194bb7$var$popularMoviesPageRendering","fetchPopularMovies"],"version":3,"file":"index.9ca084e2.js.map"}