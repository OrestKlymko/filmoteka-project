{"mappings":"qhBAAAA,EAAA,S,WCGeC,eAAAC,EAAiCC,GAC9C,IACE,MAAMC,QAAiBC,MACrB,4FAA4CF,oBAExCG,QAAaF,EAASG,OAC5B,GAA4B,IAAxBD,EAAKE,QAAQC,OACf,MAAM,IAAIC,MAAM,8BAA8BP,MAEhD,OAAOG,C,CACP,MAAOK,GACPC,QAAQC,IAAIF,E,yCCdT,MAAMG,EAAS,CACtB,CAACC,GAAI,GAAIC,KAAM,UACf,CAACD,GAAI,GAAIC,KAAM,aACf,CAACD,GAAI,GAAIC,KAAM,aACf,CAACD,GAAI,GAAIC,KAAM,UACf,CAACD,GAAI,GAAIC,KAAM,SACf,CAACD,GAAI,GAAIC,KAAM,eACf,CAACD,GAAI,MAAOC,KAAM,UAClB,CAACD,GAAI,GAAIC,KAAM,WACf,CAACD,GAAI,GAAIC,KAAM,WACf,CAACD,GAAI,GAAIC,KAAM,UACf,CAACD,GAAI,MAAOC,KAAM,SAClB,CAACD,GAAI,KAAMC,KAAM,WACjB,CAACD,GAAI,MAAOC,KAAM,WAClB,CAACD,GAAI,IAAKC,KAAM,mBAChB,CAACD,GAAI,MAAOC,KAAM,YAClB,CAACD,GAAI,GAAIC,KAAM,YACf,CAACD,GAAI,MAAOC,KAAM,OACd,CAAED,GAAI,GAAIC,KAAM,WAChB,CAAED,GAAI,GAAIC,KAAM,UCfdC,EAAqBC,SAASC,cAAc,gBAC5CC,EAAiBF,SAASC,cAAc,sBACxBD,SAASC,cAAc,gBA6B9B,SAAAE,EAAsBb,GACjC,MAAMc,EAASd,EAAQe,KAClBC,IACG,MACMC,EADO,IAAIC,KAAK,GAAGF,EAAMG,gBACbC,cAEZC,EAAcL,EAAMM,UAAUP,KAAKR,IACrC,MAAMgB,EAAQjB,EAAOkB,MAAKC,GAASA,EAAMlB,KAAOA,IAE9C,OAAOgB,EAAQA,EAAMf,KAAO,EAAE,IAGhD,IAAIkB,EAAc,GAgCX,IAA0BC,EAzBzB,OALQD,EADAL,EAAYpB,OAAS,GA+BJ0B,EA9BcN,EA+BpCM,EAAMC,MAAM,EAAE,IA/BmCC,KAAK,MAAQ,UAE3CR,EAAYQ,KAAK,MAGhC,0DACqBb,EAAMT,kGAEcS,EAAMc,yCAAyCd,EAAMe,yJAK1Ef,EAAMe,kGAEDL,qDACFT,+DAKrC,IAEQY,KAAK,IAIV,OAFAjB,EAAeoB,mBAAmB,YAAalB,GAExCA,C,CAOXL,EAAmBwB,iBAAiB,UA3ELxC,MAAMyC,IACjCA,EAAMC,iBAENvB,EAAewB,UAAY,GAE3B,MAAMzC,EAAYuC,EAAMG,cAAcC,YAAYC,MAAMC,OACxD,GAAkB,KAAd7C,EAIJ,IACI,MAAMK,QAACA,SAAiBN,EAAkBC,GAI1C,GAFAkB,EAAab,IAERA,EAAQC,OAIf,OAHMG,QAAQC,IAAI,0BACZoC,EAAAC,GAASC,OAAOC,QAAQ,8D,CAI9B,MAAOC,GACLzC,QAAQC,IAAIwC,E,sBC3BGnC,SAASoC,eAAe,MAA/C,MAEMC,EAAsB,IAAI,EAAAC,EAAAC,kBAKGxD,WAC/B,IACI,MAAMO,QAAEA,SAAkB+C,EAAoBG,qBAE9CrC,EAAab,E,CAEf,MAAO6C,GACLzC,QAAQC,IAAIwC,E,GAIpBM,G","sources":["src/index.js","src/js/get-movie-by-name.js","src/js/genres-array.js","src/js/make-markup-card.js","src/js/popular-movies-page-rendering.js"],"sourcesContent":["import './js/movie_modal';\nimport './js/get-movie-by-id.js';\nimport './js/get-movie-by-name.js'\nimport './js/get-movie-details.js'\nimport './js/get-popular-movies.js'\nimport './js/local-storage.js'\n// import './js/pagination.js'\n// import './js/spinner.js'\nimport './js/popular-movies-page-rendering.js'\nimport './js/make-markup-card.js'\nimport './js/get-trailer.js'\nimport './js/show-trailer.js'\nimport \"./js/team\" \n\n","const BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '?api_key=f7d7a9b2e374f67b5381a74b61fb7dc2';\n\nexport default async function fetchMoviesByName(movieName) {\n  try {\n    const response = await fetch(\n      `${BASE_URL}/search/movie${API_KEY}&query=${movieName}&language=en-US`\n    );\n    const data = await response.json();\n    if (data.results.length === 0) {\n      throw new Error(`No movies found with name \"${movieName}\"`);\n    }\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n}\n","export const genres = [\n{id: 28, name: 'Action'},\n{id: 12, name: 'Adventure'},\n{id: 16, name: 'Animation'},\n{id: 35, name: 'Comedy'},\n{id: 80, name: 'Crime'},\n{id: 99, name: 'Documentary'},\n{id: 10751, name: 'Family'},\n{id: 14, name: 'Fantasy'},\n{id: 36, name: 'History'},\n{id: 27, name: 'Horror'},\n{id: 10402, name: 'Music'},\n{id: 9648, name: 'Mystery'},\n{id: 10749, name: 'Romance'},\n{id: 878, name: 'Science Fiction'},\n{id: 10770, name: 'TV Movie'},\n{id: 53, name: 'Thriller'},\n{id: 10752, name: 'War'},\n    { id: 37, name: 'Western' },\n    { id: 18, name: 'Drama' }\n]","import fetchMoviesByName from './get-movie-by-name'\nimport Notiflix from 'notiflix';\nimport { genres } from './genres-array'\n\nconst searchMoviesFormEl = document.querySelector('#search-form')\nconst movieWrapperEl = document.querySelector('.js-movies-wrapper') \nconst searchInputEl = document.querySelector('search__form');\n\nconst handleSearchMoviesForm = async event => {\n    event.preventDefault()\n\n    movieWrapperEl.innerHTML = '';\n\n    const movieName = event.currentTarget.searchQuery.value.trim();\n    if (movieName === '') {\n    return;\n    }\n\n    try {\n        const {results} = await fetchMoviesByName(movieName)\n\n        createMarkUp(results)\n\n        if (!results.length) {\n            console.log('Movies not found!');\n            Notiflix.Notify.failure('Search result not successful. Enter the correct movie name.'\n            );\n      return;\n        }\n    } catch (err) {\n        console.log(err)\n    }\n\n}\n\nexport default function createMarkUp(results) {\n    const markUp = results.map(\n        (movie) => {\n            const date = new Date(`${movie.release_date}`);\n            const year = date.getFullYear()\n\n            const genresArray = movie.genre_ids.map((id) => { \n                const genre = genres.find(genre => genre.id === id)\n\n                  return genre ? genre.name : '';  \n            })\n            // console.log(genresArray)\nlet genresNames = ''\n            if (genresArray.length > 2 ) {\n                genresNames = arrayLengthCheck(genresArray).join(', ') + \", other\"\n            } else {\n                genresNames = genresArray.join(', ')\n            }\n\n        return `<div class=\"thumb\">\n    <ul class=\"carditem\" data-id='${movie.id}'>\n        <li class=\"cardimg-wrap\">\n            <img src=\"https://image.tmdb.org/t/p/w500/${movie.poster_path}\" alt=\"poster of the movie ${movie.original_title}\"\n                class=\"cardimg\"\n            />\n        </li>\n        <li class=\"cardtext-wrap\">\n            <h2 class=\"cardname\">${movie.original_title}</h2>\n            <div class=\"cardinfo\">\n                <p class=\"cardgenres\">${genresNames}</span></p>\n                <p class=\"cardyear\">${year}</p>\n            </div>\n        </li>\n    </ul>\n</div>\n`\n   })\n        .join('');\n\n    movieWrapperEl.insertAdjacentHTML('beforeend', markUp);\n\n    return markUp\n}\n\nexport function arrayLengthCheck(array) {\n    return array.slice(0,2) \n    };\n\nsearchMoviesFormEl.addEventListener('submit', handleSearchMoviesForm)\n","import createMarkUp from './make-markup-card'\nimport {getPopularMovies} from './get-popular-movies'\n\nconst movieWrapperEl = document.getElementById('uk') \n\nconst getPopularMoviesIns = new getPopularMovies()\n\n\n// movieWrapperEl.innerHTML = ''\n\nconst popularMoviesPageRendering = async() => {\n    try {\n        const { results } = await getPopularMoviesIns.fetchPopularMovies()\n\n        createMarkUp(results)\n\n    } catch (err) {\n        console.log(err)\n    }\n}\n\npopularMoviesPageRendering()"],"names":["parcelRequire","async","$355ff1a9511eb7d3$export$2e2bcd8739ae039","movieName","response","fetch","data","json","results","length","Error","error","console","log","$d38b4bbce3245097$export$be3a0ca764f9df2b","id","name","$86b0fbb2e607ad89$var$searchMoviesFormEl","document","querySelector","$86b0fbb2e607ad89$var$movieWrapperEl","$86b0fbb2e607ad89$export$2e2bcd8739ae039","markUp","map","movie","year","Date","release_date","getFullYear","genresArray","genre_ids","genre1","find","genre","genresNames","array","slice","join","poster_path","original_title","insertAdjacentHTML","addEventListener","event","preventDefault","innerHTML","currentTarget","searchQuery","value","trim","$parcel$interopDefault","$7Y9D8","Notify","failure","err","getElementById","$7c17554f36d4155e$var$getPopularMoviesIns","$g5iXE","getPopularMovies","fetchPopularMovies","$7c17554f36d4155e$var$popularMoviesPageRendering"],"version":3,"file":"index.bfa654ce.js.map"}